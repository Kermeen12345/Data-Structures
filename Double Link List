#IMPLEMENTING DOUBLY LINKED LIST WITH INSERTION, DELETION, TRAVERSAL



"""Basic reference code :"""

class Node:
  """
  A class to represent a node in a doubly linked list

  Attributes:
      data: The data stored in the node
      next: The reference to the next node in the list
      prev: The reference to the previous node in the list
  """

  def __init__(self, data):
    """
    Initializes a node with the given data

    Args:
        data: The data to be stored in the node
    """
    self.data = data
    self.next = None
    self.prev = None


class DoublyLinkedList:
  """
  A class to represent a doubly linked list

  Attributes:
      head: The reference to the first node in the list
      tail: The reference to the last node in the list
  """

  def __init__(self):
    """
    Initializes the doubly linked list with an empty head and tail
    """
    self.head = None
    self.tail = None

  def is_empty(self):
    """
    Checks if the doubly linked list is empty

    Returns:
        bool: True if the list is empty, False otherwise
    """
    return self.head is None

  def insert_at_beginning(self, data):
    """
    Inserts a new node at the beginning of the doubly linked list

    Args:
        data: The data to be inserted
    """
    new_node = Node(data)
    if self.is_empty():
      self.head = self.tail = new_node
    else:
      new_node.next = self.head
      self.head.prev = new_node
      self.head = new_node

  def insert_at_end(self, data):
    """
    Inserts a new node at the end of the doubly linked list

    Args:
        data: The data to be inserted
    """
    new_node = Node(data)
    if self.is_empty():
      self.head = self.tail = new_node
    else:
      self.tail.next = new_node
      new_node.prev = self.tail
      self.tail = new_node

  def delete_at_beginning(self):
    """
    Deletes the first node from the doubly linked list

    Returns:
        The data of the deleted node, or None if the list is empty
    """
    if self.is_empty():
      return None
    deleted_node = self.head
    if self.head == self.tail:
      self.head = self.tail = None
    else:
      self.head = self.head.next
      self.head.prev = None
    return deleted_node.data

  def delete_at_end(self):
    """
    Deletes the last node from the doubly linked list

    Returns:
        The data of the deleted node, or None if the list is empty
    """
    if self.is_empty():
      return None
    deleted_node = self.tail
    if self.head == self.tail:
      self.head = self.tail = None
    else:
      self.tail = self.tail.prev
      self.tail.next = None
    return deleted_node.data

  def traverse(self):
    """
    Prints the elements of the doubly linked list
    """
    current = self.head
    while current:
      print(current.data, end=" <-> ")
      current = current.next
    print("None")

if __name__ == '__main__':
  # Create a doubly linked list
  linked_list = DoublyLinkedList()

  print("~~~~~~~~ DoublyLinkedList ~~~~~~~~~")

  # Insert elements
  ele = int(input("Enter element to insert at the beginning : "))
  linked_list.insert_at_beginning(ele)
  ele = int(input("Enter element to insert at the end : "))
  linked_list.insert_at_end(ele)
  ele = int(input("Enter element to insert at the beginning : "))
  linked_list.insert_at_beginning(ele)
  ele = int(input("Enter element to insert at the end : "))
  linked_list.insert_at_end(ele)

  # Print the linked list
  print("Doubly Linked List:")
  linked_list.traverse()

  # Delete elements from beginning and end
  deleted_data = linked_list.delete_at_beginning()
  if deleted_data:
    print("Deleted from beginning:", deleted_data)
  deleted_data = linked_list.delete_at_end()
  if deleted_data:
    print("Deleted from end:", deleted_data)

  # Print the linked list after deletions
  print("Doubly Linked List after deletions:")
  linked_list.traverse()






"""Command Line Interface for Python :"""

class Node:
    def _init_(self, data):
        self.data = data
        self.prev = None
        self.next = None

def is_empty(head):
    return head is None

def insert_at_beginning(head, tail, data):
    new_node = Node(data)
    if is_empty(head):
        head = tail = new_node  # if empty, head and tail are the same node
    else:
        new_node.next = head
        head.prev = new_node
        head = new_node
    return head, tail

def insert_at_end(head, tail, data):
    new_node = Node(data)
    if is_empty(head):
        head = tail = new_node  # if empty, head and tail are the same node
    else:
        tail.next = new_node
        new_node.prev = tail
        tail = new_node
    return head, tail

def delete_at_beginning(head, tail):
    if is_empty(head):
        print("List is empty.")
        return None, head, tail
    deleted_node = head
    if head == tail:
        head = tail = None
    else:
        head = head.next
        head.prev = None
    return deleted_node.data, head, tail

def delete_at_end(head, tail):
    if is_empty(head):
        print("List is empty.")
        return None, head, tail
    deleted_node = tail
    if head == tail:
        head = tail = None
    else:
        tail = tail.prev
        tail.next = None
    return deleted_node.data, head, tail

def traverse(head):
    current = head
    while current:
        print(current.data, end="<-->")
        current = current.next
    print("None")

def doubly_linked_list():
    head, tail = None, None
    while True:
        print("----------------DoublyLinkedList----------------")
        print("\nDoubly Linked List")
        print("1. is empty")
        print("2. insert at beginning")
        print("3. insert at end")
        print("4. delete at beginning")
        print("5. delete at end")
        print("6. display doubly linked list")
        print("7. exit")
        choice = int(input("Enter the choice (1-7): "))

        if choice == 1:
            if is_empty(head):
                print("Doubly Linked List is empty")
            else:
                print("Doubly Linked List is not empty")

        elif choice == 2:
            data = input("Enter the data: ")
            head, tail = insert_at_beginning(head, tail, data)

        elif choice == 3:
            data = input("Enter the data: ")
            head, tail = insert_at_end(head, tail, data)

        elif choice == 4:
            _, head, tail = delete_at_beginning(head, tail)

        elif choice == 5:
            _, head, tail = delete_at_end(head, tail)

        elif choice == 6:
            traverse(head)

        elif choice == 7:
            print("Exiting")
            break

        else:
            print("Invalid choice. Please enter a number between 1 and 7.")

doubly_linked_list()





"""Graphical User Interface for Python :"""

from tkinter import *
from tkinter import messagebox

# Node class for doubly linked list
class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

# Doubly linked list operations
class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def is_empty(self):
        return self.head is None

    # Insert at the beginning of the list
    def insert_at_beginning(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node

    # Insert at the end of the list
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.is_empty():
            self.head = self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node

    # Delete from the beginning of the list
    def delete_at_beginning(self):
        if self.is_empty():
            raise IndexError("delete from empty list")
        deleted_node = self.head
        if self.head == self.tail:
            self.head = self.tail = None
        else:
            self.head = self.head.next
            self.head.prev = None
        return deleted_node.data

    # Delete from the end of the list
    def delete_at_end(self):
        if self.is_empty():
            raise IndexError("delete from empty list")
        deleted_node = self.tail
        if self.head == self.tail:
            self.head = self.tail = None
        else:
            self.tail = self.tail.prev
            self.tail.next = None
        return deleted_node.data

    # Traverse the list and return elements as a list
    def traverse(self):
        elements = []
        current = self.head
        while current:
            elements.append(current.data)
            current = current.next
        return elements

# GUI application for interacting with the doubly linked list
class DLLApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Prac 4")
        self.root.state("zoomed")
        self.root.configure(bg='light blue')

        # Create GUI elements
        self.label = Label(root, text="Doubly Linked List Data Structure", font=("Script MT Bold", 20), bg="cyan")
        self.label.grid(row=0, column=0, columnspan=6, pady=10)

        self.entry_label = Label(self.root, text="Enter element:", font=("Calibri", 14), bg="cyan")
        self.entry_label.grid(row=1, column=0, padx=10, pady=10)

        self.entry = Entry(self.root, width=20, font=("Calibri", 14))
        self.entry.grid(row=1, column=1, padx=10, pady=10)

        # Buttons for list operations
        self.insert_beginning_button = Button(self.root, text="Insert at Beginning", font=("Calibri", 14), command=self.insert_at_beginning)
        self.insert_beginning_button.grid(row=1, column=2, padx=10, pady=10)

        self.insert_end_button = Button(self.root, text="Insert at End", font=("Calibri", 14), command=self.insert_at_end)
        self.insert_end_button.grid(row=1, column=3, padx=10, pady=10)

        self.delete_beginning_button = Button(self.root, text="Delete at Beginning", font=("Calibri", 14), command=self.delete_at_beginning)
        self.delete_beginning_button.grid(row=2, column=2, padx=10, pady=10)

        self.delete_end_button = Button(self.root, text="Delete at End", font=("Calibri", 14), command=self.delete_at_end)
        self.delete_end_button.grid(row=2, column=3, padx=10, pady=10)

        self.traverse_button = Button(self.root, text="Traverse", font=("Calibri", 14), command=self.traverse_list)
        self.traverse_button.grid(row=2, column=4, padx=10, pady=10)

        self.status_label = Label(self.root, text="", font=("Calibri", 14), bg="cyan")
        self.status_label.grid(row=3, column=0, columnspan=6, pady=10)

        # Frame and canvas for displaying the list with scrollbar
        self.list_frame = Frame(self.root, bg="white")
        self.list_frame.grid(row=4, column=0, columnspan=6, pady=10, sticky="nsew")

        self.canvas = Canvas(self.list_frame, bg="white")
        self.canvas.pack(side=LEFT, fill=BOTH, expand=True)

        self.scrollbar = Scrollbar(self.list_frame, orient=HORIZONTAL, command=self.canvas.xview)
        self.scrollbar.pack(side=BOTTOM, fill=X)

        self.canvas.configure(xscrollcommand=self.scrollbar.set)
        self.canvas.bind('<Configure>', self.on_canvas_configure)

        # Initialize doubly linked list
        self.dll = DoublyLinkedList()

    # Adjust scroll region when canvas is resized
    def on_canvas_configure(self, event):
        self.canvas.configure(scrollregion=self.canvas.bbox('all'))

    # Insert at beginning button callback
    def insert_at_beginning(self):
        data = self.entry.get().strip()
        if data:
            self.dll.insert_at_beginning(data)
            self.entry.delete(0, END)
            self.update_status(f"Inserted at beginning: {data}")
            self.draw_list()
        else:
            messagebox.showwarning("Warning", "Element cannot be empty")

    # Insert at end button callback
    def insert_at_end(self):
        data = self.entry.get().strip()
        if data:
            self.dll.insert_at_end(data)
            self.entry.delete(0, END)
            self.update_status(f"Inserted at end: {data}")
            self.draw_list()
        else:
            messagebox.showwarning("Warning", "Element cannot be empty")

    # Delete at beginning button callback
    def delete_at_beginning(self):
        try:
            data = self.dll.delete_at_beginning()
            self.update_status(f"Deleted at beginning: {data}")
            self.draw_list()
        except IndexError:
            messagebox.showwarning("Warning", "List is empty")

    # Delete at end button callback
    def delete_at_end(self):
        try:
            data = self.dll.delete_at_end()
            self.update_status(f"Deleted at end: {data}")
            self.draw_list()
        except IndexError:
            messagebox.showwarning("Warning", "List is empty")

    # Traverse button callback
    def traverse_list(self):
        elements = self.dll.traverse()
        self.update_status(f"Traversing the list: {' <--> '.join(elements)}")
        self.draw_list()

    # Update status label text
    def update_status(self, message):
        self.status_label.config(text=message)

    # Draw the list on the canvas
    def draw_list(self):
        self.canvas.delete("all")
        if self.dll.head:
            x_start = 50
            y_start = 50
            box_width = 50
            box_height = 30
            padding = 10
            current = self.dll.head
            while current:
                x = x_start
                self.canvas.create_rectangle(x, y_start, x + box_width, y_start + box_height, fill="lightblue")
                self.canvas.create_text(x + box_width / 2, y_start + box_height / 2, text=current.data, font=("Calibri", 12))
                x_start += box_width + padding
                current = current.next
            self.canvas.configure(scrollregion=self.canvas.bbox('all'))

# Main function to start the application
if __name__ == "__main__":
    root = Tk()
    app = DLLApp(root)
    root.mainloop()





#Link for google colab : https://colab.research.google.com/drive/1Pa1AiANc-d45ScDOTNY4mund4ANZKXb7?usp=sharing
