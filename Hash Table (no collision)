#CREATING AND IMPLEMENTING BASIC HASH TABLE WITH INSERTION, DELETION, TRAVERSAL

#(assume that there are no collisions)




"""Basic reference code :"""

class HashTable:
    def __init__(self, size):
        """Initialize the hash table with a given size."""
        self.size = size
        self.table = [None] * size

    def hash_function(self, key):
        """Hash function to determine the index for a given key."""
        return key % self.size

    def insert(self, key, value):
        """Insert a key-value pair into the hash table."""
        index = self.hash_function(key)
        self.table[index] = (key, value)

    def delete(self, key):
        """Delete the value associated with the given key."""
        index = self.hash_function(key)
        if self.table[index] and self.table[index][0] == key:
            self.table[index] = None

    def search(self, key):
        """Search for the value associated with the given key."""
        index = self.hash_function(key)
        if self.table[index] and self.table[index][0] == key:
            return self.table[index][1]
        return None

    def traverse(self):
        """Traverse and print all key-value pairs in the hash table."""
        for index, item in enumerate(self.table):
            if item is not None:
                key, value = item
                print(f"Index {index}: Key {key}, Value {value}")

# Example Usage
if __name__ == "__main__":
    # Create a hash table with a fixed size of 10
    hash_table = HashTable(size=10)

    # Insert some values
    hash_table.insert(1, "Value for key 1")
    hash_table.insert(2, "Value for key 2")
    hash_table.insert(12, "Value for key 12")  # This will go to the same index as key 2

    # Traverse and print the hash table
    print("Hash Table after insertions:")
    hash_table.traverse()

    # Search for values
    print("\nSearching for key 2:")
    print(hash_table.search(2))  # Should print: Value for key 2

    print("Searching for key 1:")
    print(hash_table.search(1))  # Should print: Value for key 1

    print("Searching for key 12:")
    print(hash_table.search(12))  # Should print: Value for key 12

    # Delete a value
    hash_table.delete(2)

    # Traverse and print the hash table after deletion
    print("\nHash Table after deletion:")
    hash_table.traverse()

    # Search for deleted key
    print("\nSearching for deleted key 2:")
    print(hash_table.search(2))  # Should print: None





"""Command Line Interface for Python :"""

class HashTable:
    def size(self, size):
        """Initialize the hash table with a given size."""
        self.size = size
        self.table = [None] * size
    def hash_function(self, key):
        """Hash function to determine the index for a given key."""
        return key % self.size
    def insert(self, key, value):
        """Insert a key-value pair into the hash table."""
        index = self.hash_function(key)
        self.table[index] = (key, value)
    def delete(self, key):
        """Delete the value associated with the given key."""
        index = self.hash_function(key)
        if self.table[index] and self.table[index][0] == key:
            self.table[index] = None
    def search(self, key):
        """Search for the value associated with the given key."""
        index = self.hash_function(key)
        if self.table[index] and self.table[index][0] == key:
            print( self.table[index][1])
        return None
    def traverse(self):
        """Traverse and print all key-value pairs in the hash table."""
        for index, item in enumerate(self.table):
            if item is not None:
                key, value = item
                print(f"Index {index}: Key {key}, Value {value}")
def operation():
    ht = HashTable()
    while True:
        print("----------------Hash Table----------------")
        print(" 1.Size of Table\n 2.Insert into Table\n 3.Delete an Element\n 4.Search\n 5.Traverse\n 6.Exit")
        choice = int(input("Enter your choice(1-6): "))
        if choice == 1:
            size = int(input("Enter the size of array: "))
            ht.size(size)
        elif choice == 2:
            key=int(input("Enter the key: "))
            value=input("Enter the Value for the key: ")
            ht.insert(key, value)
        elif choice == 3:
            key=int(input("Enter the key: "))
            ht.delete(key)
        elif choice == 4:
            key=int(input("Enter the key: "))
            ht.search(key)
        elif choice == 5:
            ht.traverse()
        elif choice == 6:
            print("Exiting....")
            break
        else:
            print("Invalid choice.")
operation()






"""Graphical User Interface for Python :"""

import tkinter as tk
from tkinter import messagebox

class HashTableGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Hash Table")
        self.root.geometry("600x400")
        self.root.configure(bg="turquoise")

        self.table = []
        self.size = 0

        # Header
        header_frame = tk.Frame(self.root, bg="turquoise")
        header_frame.pack(pady=10)
        header_label = tk.Label(header_frame, text="Hash Table Application", font=("Script MT Bold", 16), bg="turquoise")
        header_label.pack()

        # Input Frame
        input_frame = tk.Frame(self.root, bg="turquoise")
        input_frame.pack(pady=10)

        # Size Input
        size_label = tk.Label(input_frame, text="Size:", font=("Script MT Bold", 12), bg="turquoise")
        size_label.grid(row=0, column=0, padx=5, pady=5)
        self.size_entry = tk.Entry(input_frame)
        self.size_entry.grid(row=0, column=1, padx=5, pady=5)

        # Key Input
        key_label = tk.Label(input_frame, text="Key:", font=("Script MT Bold", 12), bg="turquoise")
        key_label.grid(row=1, column=0, padx=5, pady=5)
        self.key_entry = tk.Entry(input_frame)
        self.key_entry.grid(row=1, column=1, padx=5, pady=5)

        # Value Input
        value_label = tk.Label(input_frame, text="Value:", font=("Script MT Bold", 12), bg="turquoise")
        value_label.grid(row=2, column=0, padx=5, pady=5)
        self.value_entry = tk.Entry(input_frame)
        self.value_entry.grid(row=2, column=1, padx=5, pady=5)

        # Buttons
        button_frame = tk.Frame(self.root, bg="turquoise")
        button_frame.pack(pady=10)

        set_size_btn = tk.Button(button_frame, text="Set Size", command=self.set_size, font=("Script MT Bold", 12))
        set_size_btn.grid(row=0, column=0, padx=5, pady=5)

        insert_btn = tk.Button(button_frame, text="Insert", command=self.insert, font=("Script MT Bold", 12))
        insert_btn.grid(row=0, column=1, padx=5, pady=5)

        delete_btn = tk.Button(button_frame, text="Delete", command=self.delete, font=("Script MT Bold", 12))
        delete_btn.grid(row=1, column=0, padx=5, pady=5)

        search_btn = tk.Button(button_frame, text="Search", command=self.search, font=("Script MT Bold", 12))
        search_btn.grid(row=1, column=1, padx=5, pady=5)

        traverse_btn = tk.Button(button_frame, text="Traverse", command=self.traverse, font=("Script MT Bold", 12))
        traverse_btn.grid(row=2, column=0, padx=5, pady=5)

        quit_btn = tk.Button(button_frame, text="Quit", command=self.root.quit, font=("Script MT Bold", 12))
        quit_btn.grid(row=2, column=1, padx=5, pady=5)

    def set_size(self):
        try:
            self.size = int(self.size_entry.get())
            self.table = [None] * self.size
            messagebox.showinfo("Success", f"Hash table size set to {self.size}")
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid size.")

    def hash_function(self, key):
        return key % self.size

    def insert(self):
        try:
            key = int(self.key_entry.get())
            value = self.value_entry.get()
            index = self.hash_function(key)
            self.table[index] = (key, value)
            messagebox.showinfo("Success", f"Key {key} inserted with value '{value}'")
        except ValueError:
            messagebox.showerror("Error", "Invalid key or value.")

    def delete(self):
        try:
            key = int(self.key_entry.get())
            index = self.hash_function(key)
            if self.table[index] and self.table[index][0] == key:
                self.table[index] = None
                messagebox.showinfo("Success", f"Key {key} deleted.")
            else:
                messagebox.showerror("Error", "Key not found.")
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid key.")

    def search(self):
        try:
            key = int(self.key_entry.get())
            index = self.hash_function(key)
            if self.table[index] and self.table[index][0] == key:
                value = self.table[index][1]
                messagebox.showinfo("Found", f"Key {key} has value '{value}'")
            else:
                messagebox.showinfo("Not Found", f"Key {key} not found.")
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid key.")

    def traverse(self):
        entries = "\n".join([f"Index {i}: Key {key}, Value {value}" for i, (key, value) in enumerate(self.table) if self.table[i] is not None])
        if entries:
            messagebox.showinfo("Hash Table", entries)
        else:
            messagebox.showinfo("Hash Table", "Hash table is empty.")

if __name__ == "__main__":
    root = tk.Tk()
    app = HashTableGUI(root)
    root.mainloop()





#Link for google colab : https://colab.research.google.com/drive/1iu0fPiVKra-3RWMEFzDlKBVIOWMCgv9H?usp=sharing
