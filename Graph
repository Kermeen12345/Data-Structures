#IMPLEMENTING GRAPH DATA STRUCTURE WITH INSERTION, DELETION OF VERTICES



"""Basic reference code :"""

class Graph:
    def __init__(self):
        # Initialize an empty dictionary to store the adjacency list
        self.graph = {}

    def add_vertex(self, vertex):
        """Add a vertex to the graph."""
        if vertex not in self.graph:
            self.graph[vertex] = []
        else:
            print(f"Vertex {vertex} already exists.")

    def remove_vertex(self, vertex):
        """Remove a vertex and all its edges from the graph."""
        if vertex in self.graph:
            # Remove all edges to this vertex from other vertices
            for adjacent in list(self.graph[vertex]):
                self.graph[adjacent].remove(vertex)
            # Remove the vertex from the graph
            del self.graph[vertex]
        else:
            print(f"Vertex {vertex} does not exist.")

    def add_edge(self, vertex1, vertex2):
        """Add an undirected edge between vertex1 and vertex2."""
        if vertex1 in self.graph and vertex2 in self.graph:
            if vertex2 not in self.graph[vertex1]:
                self.graph[vertex1].append(vertex2)
            if vertex1 not in self.graph[vertex2]:
                self.graph[vertex2].append(vertex1)
        else:
            print("One or both vertices not found.")

    def remove_edge(self, vertex1, vertex2):
        """Remove an edge between vertex1 and vertex2."""
        if vertex1 in self.graph and vertex2 in self.graph:
            if vertex2 in self.graph[vertex1]:
                self.graph[vertex1].remove(vertex2)
            if vertex1 in self.graph[vertex2]:
                self.graph[vertex2].remove(vertex1)
        else:
            print("One or both vertices not found.")

    def display(self):
        """Display the adjacency list of the graph."""
        for vertex, edges in self.graph.items():
            print(f"{vertex}: {edges}")

# Example usage
if __name__ == "__main__":
    g = Graph()

    # Adding vertices
    g.add_vertex('A')
    g.add_vertex('B')
    g.add_vertex('C')
    g.add_vertex('D')

    # Adding edges
    g.add_edge('A', 'B')
    g.add_edge('A', 'C')
    g.add_edge('B', 'D')

    print("Graph after adding vertices and edges:")
    g.display()

    # Removing an edge
    g.remove_edge('A', 'C')

    # Removing a vertex
    g.remove_vertex('D')

    print("\nGraph after removing an edge and a vertex:")
    g.display()





"""Command Line Interface for Python :"""

class Graph:
    def __init__(self):
        self.graph = {}

    def add_vertex(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []

    def remove_vertex(self, vertex):
        if vertex in self.graph:
            for adjacent in self.graph[vertex]:
                self.graph[adjacent].remove(vertex)
            del self.graph[vertex]

    def add_edge(self, vertex1, vertex2):
        if vertex1 in self.graph and vertex2 in self.graph:
            if vertex2 not in self.graph[vertex1]:
                self.graph[vertex1].append(vertex2)
            if vertex1 not in self.graph[vertex2]:
                self.graph[vertex2].append(vertex1)

    def remove_edge(self, vertex1, vertex2):
        if vertex1 in self.graph and vertex2 in self.graph:
            if vertex2 in self.graph[vertex1]:
                self.graph[vertex1].remove(vertex2)
            if vertex1 in self.graph[vertex2]:
                self.graph[vertex2].remove(vertex1)

    def display(self):
        for vertex, edges in self.graph.items():
            print(f"{vertex}: {edges}")

# Function to take user input and populate the graph
def main():
    g = Graph()

    # Adding vertices
    num_vertices = int(input("Enter the number of vertices: "))
    for _ in range(num_vertices):
        vertex = input("Enter vertex: ")
        g.add_vertex(vertex)

    # Adding edges
    num_edges = int(input("Enter the number of edges: "))
    for _ in range(num_edges):
        vertex1 = input("Enter the first vertex of the edge: ")
        vertex2 = input("Enter the second vertex of the edge: ")
        g.add_edge(vertex1, vertex2)

    print("\nGraph after adding vertices and edges:")
    g.display()

    # Optionally remove an edge
    remove_edge = input("\nDo you want to remove an edge? (yes/no): ")
    if remove_edge.lower() == 'yes':
        vertex1 = input("Enter the first vertex of the edge to remove: ")
        vertex2 = input("Enter the second vertex of the edge to remove: ")
        g.remove_edge(vertex1, vertex2)

    # Optionally remove a vertex
    remove_vertex = input("\nDo you want to remove a vertex? (yes/no): ")
    if remove_vertex.lower() == 'yes':
        vertex = input("Enter the vertex to remove: ")
        g.remove_vertex(vertex)

    print("\nFinal graph:")
    g.display()

if __name__ == "__main__":
    main()





"""Graphical User Interface for Python :"""

import tkinter as tk
from tkinter import messagebox

class Graph:
    #A simple graph class to represent an undirected graph.

    def __init__(self):
        self.graph = {}  # Dictionary to store graph adjacency list

    def add_vertex(self, vertex):

        #Add a vertex to the graph.

        if vertex not in self.graph:
            self.graph[vertex] = []

    def remove_vertex(self, vertex):

        #Remove a vertex and its edges from the graph.

        if vertex in self.graph:
            # Remove vertex from adjacency lists of other vertices
            for adjacent in self.graph[vertex]:
                self.graph[adjacent].remove(vertex)
            del self.graph[vertex]

    def add_edge(self, vertex1, vertex2):

        #Add an undirected edge between two vertices.

        if vertex1 in self.graph and vertex2 in self.graph:
            if vertex2 not in self.graph[vertex1]:
                self.graph[vertex1].append(vertex2)
            if vertex1 not in self.graph[vertex2]:
                self.graph[vertex2].append(vertex1)

    def remove_edge(self, vertex1, vertex2):

        #Remove an undirected edge between two vertices.

        if vertex1 in self.graph and vertex2 in self.graph:
            if vertex2 in self.graph[vertex1]:
                self.graph[vertex1].remove(vertex2)
            if vertex1 in self.graph[vertex2]:
                self.graph[vertex2].remove(vertex1)

    def display(self):

        #Display the graph in the console.

        for vertex, edges in self.graph.items():
            print(f"{vertex}: {edges}")

    def get_tree_levels(self, root):

        #Get levels of vertices in a tree-like structure starting from the root.

        levels = {}  # Dictionary to store vertices at each level
        visited = set()  # Set to track visited vertices

        def dfs(vertex, level):

            #Depth-first search to determine levels of each vertex.

            if vertex not in visited:
                visited.add(vertex)
                if level not in levels:
                    levels[level] = []
                levels[level].append(vertex)
                for neighbor in self.graph[vertex]:
                    if neighbor not in visited:
                        dfs(neighbor, level + 1)

        dfs(root, 0)
        return levels


class GraphApp:

    #GUI application for the graph using tkinter.
    def __init__(self, root):
        self.root = root
        self.root.title("Graph")  # Set window title
        self.root.configure(bg='turquoise')  # Set background color to turquoise

        self.graph = Graph()  # Create a Graph object

        # Define font for all widgets
        self.font = ("Script MT Bold", 12)

        self.setup_widgets()  # Setup the GUI widgets

    def setup_widgets(self):

        #Setup all the GUI widgets.

        # Add top label displaying 'Graph'
        self.title_label = tk.Label(self.root, text="Graph", font=self.font, bg='turquoise')
        self.title_label.pack(pady=10)

        # Create and place widgets for vertex input
        self.vertex_label = tk.Label(self.root, text="Vertex:", font=self.font, bg='turquoise')
        self.vertex_label.pack()
        self.vertex_entry = tk.Entry(self.root, font=self.font)
        self.vertex_entry.pack()
        self.add_vertex_button = tk.Button(self.root, text="Add Vertex", font=self.font, command=self.add_vertex)
        self.add_vertex_button.pack()

        # Create and place widgets for edge input
        self.edge_label1 = tk.Label(self.root, text="Edge Vertex 1:", font=self.font, bg='turquoise')
        self.edge_label1.pack()
        self.edge_entry1 = tk.Entry(self.root, font=self.font)
        self.edge_entry1.pack()

        self.edge_label2 = tk.Label(self.root, text="Edge Vertex 2:", font=self.font, bg='turquoise')
        self.edge_label2.pack()
        self.edge_entry2 = tk.Entry(self.root, font=self.font)
        self.edge_entry2.pack()
        self.add_edge_button = tk.Button(self.root, text="Add Edge", font=self.font, command=self.add_edge)
        self.add_edge_button.pack()

        # Canvas for drawing the graph
        self.canvas = tk.Canvas(self.root, width=600, height=400, bg='white')
        self.canvas.pack()

        # Button to display the graph
        self.display_button = tk.Button(self.root, text="Display Graph", font=self.font, command=self.display_graph)
        self.display_button.pack()

    def add_vertex(self):

        #Add a vertex to the graph from user input.

        vertex = self.vertex_entry.get()
        if vertex:
            self.graph.add_vertex(vertex)
            messagebox.showinfo("Success", f"Vertex '{vertex}' added.")
            self.vertex_entry.delete(0, tk.END)  # Clear the entry field
        else:
            messagebox.showwarning("Input Error", "Please enter a vertex.")

    def add_edge(self):

        #Add an edge between two vertices from user input.

        vertex1 = self.edge_entry1.get()
        vertex2 = self.edge_entry2.get()
        if vertex1 and vertex2:
            self.graph.add_edge(vertex1, vertex2)
            messagebox.showinfo("Success", f"Edge '{vertex1} - {vertex2}' added.")
            self.edge_entry1.delete(0, tk.END)  # Clear the first entry field
            self.edge_entry2.delete(0, tk.END)  # Clear the second entry field
        else:
            messagebox.showwarning("Input Error", "Please enter both vertices.")

    def display_graph(self):

        #Display the graph on the canvas in a tree-like structure.

        self.canvas.delete("all")  # Clear the canvas

        if not self.graph.graph:
            messagebox.showwarning("Graph Empty", "No vertices or edges to display.")
            return

        # Start drawing the graph from an arbitrary root
        root = next(iter(self.graph.graph))
        levels = self.graph.get_tree_levels(root)

        x_start = self.canvas.winfo_width() // 2  # Center the graph horizontally
        y_start = 50  # Start drawing from the top
        x_gap = 50  # Horizontal gap between vertices
        y_gap = 100  # Vertical gap between levels
        vertex_positions = {}  # Dictionary to store vertex positions on the canvas

        # Position vertices based on their level
        for level, vertices in levels.items():
            x_position = x_start - (len(vertices) - 1) * x_gap // 2
            for vertex in vertices:
                vertex_positions[vertex] = (x_position, y_start + level * y_gap)
                x_position += x_gap

        # Draw vertices and edges
        for vertex, position in vertex_positions.items():
            x, y = position
            self.canvas.create_oval(x - 10, y - 10, x + 10, y + 10, fill='blue')  # Draw vertex
            self.canvas.create_text(x, y, text=vertex, font=self.font, fill='white')  # Label vertex

        # Draw edges
        for vertex, edges in self.graph.graph.items():
            x1, y1 = vertex_positions[vertex]
            for edge in edges:
                x2, y2 = vertex_positions[edge]
                self.canvas.create_line(x1, y1, x2, y2, fill='black')  # Draw edge


if __name__ == "__main__":
    root = tk.Tk()  # Create the main window
    app = GraphApp(root)  # Create an instance of GraphApp
    root.mainloop()  # Run the main event loop





#Link for google colab : https://colab.research.google.com/drive/1vlJi2KmoH5e6yLGFgJW3P9T8YRPGFG65?usp=sharing
