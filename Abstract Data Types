#IMPLEMENTING ABSTRACT DATA TYPE (ADT)



""" Basic Reference Code :"""

class Stack:
    def __init__(self):
        self.array = []
        self.top = 0 # stack empty

    def push(self, element):
        #Check Overflow or Stak is Full
        if self.top > len(self.array) - 1:
            print("Stack Full.")
        else:
          self.array.append(element)
          self.top += 1

    def pop(self):
        # Check Underflow OR Stack Empty
        if self.top == -1:
            return None #"Stack Empty."
        else:
            element = self.array[self.top]
            self.top -= 1
            return element

    def peek(self):
        if self.top == -1:
            return None
        else:
            return self.array[self.top]

    def display(self):
        for i in range(self.top, -1, -1):
            print(self.array[i])

stack = Stack(5)
stack.push(1)
stack.push(2)
stack.push(3)
stack.push(4)
stack.push(5)
stack.push(6)
stack.display()





""" Command Line Interface for Python :"""

class Queue:
    def __init__(self):
        self.elements = []

    def enqueue(self, element):
        self.elements.append(element)

    def dequeue(self):
        if not self.is_empty():
            return self.elements.pop(0)
        else:
            raise IndexError("Removed from empty queue")

    def peek(self):
        if not self.is_empty():
            return self.elements[0]
        else:
            raise IndexError("peek from empty queue")

    def size(self):
        return len(self.elements)

    def is_empty(self):
        return len(self.elements) == 0


# Function to interact with the queue using user input
def queue_operations():
    queue = Queue()
    while True:
        print("\nQueue Operations: \n1. Add an element \n2. Remove an element \n3. Peek \n4. Size \n5. Is Empty \n6. Exit")

        choice = input("Enter your choice (1-6): ")

        if choice == '1':
            element = input("Enter element to add: ")
            queue.enqueue(element)
            print(f"{element} added to queue.")

        elif choice == '2':
            try:
                element = queue.dequeue()
                print(f"{element} removed from queue.")
            except IndexError as e:
                print(e)

        elif choice == '3':
            try:
                element = queue.peek()
                print(f"Front element: {element}")
            except IndexError as e:
                print(e)

        elif choice == '4':
            print(f"Size of queue: {queue.size()}")

        elif choice == '5':
            if queue.is_empty():
                print("Queue is empty.")
            else:
                print("Queue is not empty.")

        elif choice == '6':
            print("Exiting...")
            break

        else:
            print("Invalid choice. Please enter a number between 1 and 6.")

# Main function to run the program
if __name__ == "__main__":
    queue_operations()





"""Graphical User Interface for Python:"""

from tkinter import *
from tkinter import messagebox

# Initialize the global variables
queue = []
max_size = 0

def set_queue_size():
    global max_size
    try:
        size = int(size_entry.get())
        if size > 0:
            max_size = size
            update_status(f"Queue size set to {size}")
            draw_queue()
        else:
            update_status("Size should be greater than zero")
    except ValueError:
        update_status("Invalid input. Enter a valid integer.")

def enqueue_element():
    if max_size > 0:
        try:
            element = entry.get()
            if len(queue) < max_size:
                queue.append(element)
                entry.delete(0, END)
                update_status(f"Enqueued: {element}")
                draw_queue()
            else:
                messagebox.showwarning("Warning", "Queue is full")
        except IndexError:
            messagebox.showwarning("Warning", "Queue is full")
    else:
        messagebox.showerror("Error", "Set queue size first")

def dequeue_element():
    if max_size > 0:
        try:
            if queue:
                element = queue.pop(0)
                update_status(f"Dequeued: {element}")
                draw_queue()
            else:
                messagebox.showwarning("Warning", "Queue is empty")
        except IndexError:
            messagebox.showwarning("Warning", "Queue is empty")
    else:
        messagebox.showerror("Error", "Set queue size first")

def peek_element():
    if max_size > 0:
        try:
            if queue:
                element = queue[0]
                messagebox.showinfo("Peek", f"Front element: {element}")
            else:
                messagebox.showwarning("Warning", "Queue is empty")
        except IndexError:
            messagebox.showwarning("Warning", "Queue is empty")
    else:
        messagebox.showerror("Error", "Set queue size first")

def check_is_empty():
    if max_size > 0:
        if not queue:
            messagebox.showinfo("Is Empty", "Queue is empty")
        else:
            messagebox.showinfo("Is Empty", "Queue is not empty")
    else:
        messagebox.showerror("Error", "Set queue size first")

def update_status(message):
    size = len(queue)
    status_label.config(text=f"{message} | Current size: {size}")

def draw_queue():
    canvas.delete("all")
    if queue:
        x_start = 50
        y_start = 50
        box_width = 50
        box_height = 30
        padding = 10
        for idx, element in enumerate(queue):
            x = x_start + idx * (box_width + padding)
            canvas.create_rectangle(x, y_start, x + box_width, y_start + box_height, fill="dark turquoise")
            canvas.create_text(x + box_width / 2, y_start + box_height / 2, text=element, font=("Script MT Bold", 12))

# Initialize the main window
root = Tk()
root.title("Queue Data Structure")
root.state("zoomed")
root.configure(bg='light blue')

# Create GUI elements
label = Label(root, text="Queue Data Structure", font=("Script MT Bold", 20), bg="cyan")
label.grid(row=0, column=0, columnspan=6, pady=10)

size_label = Label(root, text="Enter queue size:", font=("Script MT Bold", 14), bg="cyan")
size_label.grid(row=1, column=0, padx=10, pady=10)

size_entry = Entry(root, width=10, font=("Script MT Bold", 14))
size_entry.grid(row=1, column=1, padx=10, pady=10)

size_button = Button(root, text="Set Size", font=("Script MT Bold", 14), command=set_queue_size)
size_button.grid(row=1, column=2, padx=10, pady=10)

entry_label = Label(root, text="Enter element:", font=("Script MT Bold", 14), bg="light blue")
entry_label.grid(row=4, column=0, padx=10, pady=10)

entry = Entry(root, width=20, font=("Script MT Bold", 14))
entry.grid(row=4, column=1, padx=10, pady=10)

enqueue_button = Button(root, text="Enqueue", font=("Script MT Bold", 14), command=enqueue_element)
enqueue_button.grid(row=4, column=2, padx=10, pady=10)

dequeue_button = Button(root, text="Dequeue", font=("Script MT Bold", 14), command=dequeue_element)
dequeue_button.grid(row=4, column=3, padx=10, pady=10)

peek_button = Button(root, text="Peek", font=("Script MT Bold", 14), command=peek_element)
peek_button.grid(row=4, column=4, padx=10, pady=10)

is_empty_button = Button(root, text="Is Empty", font=("Script MT Bold", 14), command=check_is_empty)
is_empty_button.grid(row=4, column=5, padx=10, pady=10)

status_label = Label(root, text="Size: 0", font=("Script MT Bold", 14), bg="light blue")
status_label.grid(row=5, column=0, columnspan=6, pady=10)

# Add a frame to display the queue
queue_frame = Frame(root, bg="white")
queue_frame.grid(row=6, column=0, columnspan=6, pady=10)

canvas = Canvas(queue_frame, width=600, height=200, bg="white")
canvas.pack()

# Run the main loop
root.mainloop()





#Link for google colab : https://colab.research.google.com/drive/1Id9LHS2ogEmWwyAtMx2g0AIZ4LFp0rsA?usp=sharing
