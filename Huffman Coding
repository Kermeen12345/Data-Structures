#IMPLEMENTING HUFFMAN CODING USING TREE DATA STRUCTURE



"""Basic reference code :"""

import heapq
from collections import defaultdict, Counter

class Node:
    def __init__(self, char=None, freq=None):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(frequencies):
    heap = [Node(char, freq) for char, freq in frequencies.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(freq=left.freq + right.freq)
        merged.left = left
        merged.right = right
        heapq.heappush(heap, merged)

    return heap[0]

def generate_codes(node, prefix="", codebook={}):
    if node:
        if node.char is not None:
            codebook[node.char] = prefix
        generate_codes(node.left, prefix + "0", codebook)
        generate_codes(node.right, prefix + "1", codebook)
    return codebook

def huffman_encoding(data):
    if not data:
        return "", {}

    frequencies = Counter(data)
    root = build_huffman_tree(frequencies)
    codebook = generate_codes(root)
    encoded_data = ''.join(codebook[char] for char in data)

    return encoded_data, codebook

def huffman_decoding(encoded_data, codebook):
    reverse_codebook = {v: k for k, v in codebook.items()}
    decoded_data = ""
    current_code = ""

    for bit in encoded_data:
        current_code += bit
        if current_code in reverse_codebook:
            decoded_data += reverse_codebook[current_code]
            current_code = ""

    return decoded_data

# Example usage
if __name__ == "__main__":
    data = "mvlu college mahendra kanojia"
    print("Original data:", data)

    encoded_data, codebook = huffman_encoding(data)
    print("Encoded data:", encoded_data)
    print("Codebook:", codebook)

    decoded_data = huffman_decoding(encoded_data, codebook)
    print("Decoded data:", decoded_data)




"""Explanation :"""

#Node Class

#Represents a node in the Huffman tree.
#Contains:
#1.`char`: the character stored in the node.
#2.`freq`: the frequency of the character.
#3.`left`: reference to the left child node.
#4.`right`: reference to the right child node.
#5.The `__lt__` method allows nodes to be compared based on their frequencies, which is necessary for the priority queue used in the Huffman algorithm.

#build_huffman_tree Function

#Takes a dictionary of character frequencies and builds the Huffman tree using a priority queue (min-heap).
#Nodes are created for each character and frequency pair.
#Nodes are combined until only one node remains, which is the root of the Huffman tree.

#generate_codes Function

#Recursively traverses the Huffman tree to generate Huffman codes for each character.
#Codes are generated by appending '0' for left edges and '1' for right edges.
#The result is stored in a dictionary (`codebook`) mapping characters to their Huffman codes.

#huffman_encoding Function

#Takes input data and returns the encoded data and the codebook.
#Frequencies of characters are calculated using `Counter`.
#The Huffman tree is built, and codes are generated.
#The input data is encoded by replacing each character with its corresponding Huffman code.

#huffman_decoding Function

#Takes encoded data and a codebook and returns the decoded data.
#The codebook is reversed to map Huffman codes to characters.
#The encoded data is decoded by matching sequences of bits to characters using the reversed codebook.




"""Command Line Interface for Python :"""

import heapq
from collections import defaultdict, Counter

class Node:
    def __init__(self, char=None, freq=None):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(frequencies):
    heap = [Node(char, freq) for char, freq in frequencies.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(freq=left.freq + right.freq)
        merged.left = left
        merged.right = right
        heapq.heappush(heap, merged)

    return heap[0]

def generate_codes(node, prefix="", codebook={}):
    if node:
        if node.char is not None:
            codebook[node.char] = prefix
        generate_codes(node.left, prefix + "0", codebook)
        generate_codes(node.right, prefix + "1", codebook)
    return codebook

def huffman_encoding(data):
    if not data:
        return "", {}

    frequencies = Counter(data)
    root = build_huffman_tree(frequencies)
    codebook = generate_codes(root)
    encoded_data = ''.join(codebook[char] for char in data)

    return encoded_data, codebook

def huffman_decoding(encoded_data, codebook):
    reverse_codebook = {v: k for k, v in codebook.items()}
    decoded_data = ""
    current_code = ""

    for bit in encoded_data:
        current_code += bit
        if current_code in reverse_codebook:
            decoded_data += reverse_codebook[current_code]
            current_code = ""

    return decoded_data

# Example usage
if __name__ == "__main__":
    data = input("Enter Your Data : ")
    print("Original data:", data)

    encoded_data, codebook = huffman_encoding(data)
    print("Encoded data:", encoded_data)
    print("Codebook:", codebook)

    decoded_data = huffman_decoding(encoded_data, codebook)
    print("Decoded data:", decoded_data)





"""Graphical User Interface for Python :"""

import heapq
from collections import Counter
import tkinter as tk
from tkinter import scrolledtext
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Node class for Huffman tree
class Node:
    def __init__(self, char=None, freq=None):
        self.char = char
        self.freq = freq
        self.left = None
        self.right = None

    def __lt__(self, other):
        return self.freq < other.freq

# Build the Huffman tree
def build_huffman_tree(frequencies):
    heap = [Node(char, freq) for char, freq in frequencies.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(freq=left.freq + right.freq)
        merged.left = left
        merged.right = right
        heapq.heappush(heap, merged)

    return heap[0]

# Generate the Huffman codes
def generate_codes(node, prefix="", codebook={}):
    if node:
        if node.char is not None:
            codebook[node.char] = prefix
        generate_codes(node.left, prefix + "0", codebook)
        generate_codes(node.right, prefix + "1", codebook)
    return codebook

# Encode the data using Huffman coding
def huffman_encoding(data):
    if not data:
        return "", {}, None

    frequencies = Counter(data)
    root = build_huffman_tree(frequencies)
    codebook = generate_codes(root)
    encoded_data = ''.join(codebook[char] for char in data)

    return encoded_data, codebook, root

# Decode the encoded data using the codebook
def huffman_decoding(encoded_data, codebook):
    reverse_codebook = {v: k for k, v in codebook.items()}
    decoded_data = ""
    current_code = ""

    for bit in encoded_data:
        current_code += bit
        if current_code in reverse_codebook:
            decoded_data += reverse_codebook[current_code]
            current_code = ""

    return decoded_data

# Visualize the Huffman tree using matplotlib
def _huffman_tree(root):
    fig, ax = plt.subplots(figsize=(10, 8))
    pos = {}
    labels = {}
    
    def plot_tree(node, x, y, dx):
        if node:
            pos[node] = (x, y)
            labels[node] = f'{node.char}\n{node.freq}' if node.char else f'{node.freq}'
            if node.left:
                ax.plot([x, x - dx], [y - 1, y - 2], 'k-')
                plot_tree(node.left, x - dx, y - 2, dx / 2)
            if node.right:
                ax.plot([x, x + dx], [y - 1, y - 2], 'k-')
                plot_tree(node.right, x + dx, y - 2, dx / 2)
    
    plot_tree(root, 0, 0, 4)
    
    for node, (x, y) in pos.items():
        ax.text(x, y, labels[node], ha='center', va='center',
                bbox=dict(boxstyle="round,pad=0.3", edgecolor='black',
                          facecolor='lightblue'))
    
    ax.set_xlim(-8, 8)
    ax.set_ylim(-10, 2)
    ax.axis('off')
    
    return fig

# Initialize the main window
root = tk.Tk()
root.title("Huffman Coding Using Tree")
root.configure(bg="turquoise")

# Title label
label_title = tk.Label(root, text="Huffman Coding", bg="turquoise",
                       font=("Script MT Bold", 20))
label_title.pack()

# Label for data entry
label_data = tk.Label(root, text="Enter Your Data:", bg="turquoise",
                      font=("Script MT Bold", 14))
label_data.pack()

# Text area for entering data
text_data = scrolledtext.ScrolledText(root, height=5, width=50,
                                      font=("Script MT Bold", 12))
text_data.pack()

# Function to encode data
def encode_data():
    data = text_data.get("1.0", tk.END).strip()
    if not data:
        return
    encoded_data, codebook, root = huffman_encoding(data)
    text_encoded.delete("1.0", tk.END)
    text_encoded.insert(tk.END, encoded_data)
    text_codebook.delete("1.0", tk.END)
    text_codebook.insert(tk.END, str(codebook))
    return root

# Button to trigger encoding
button_encode = tk.Button(root, text="Encode", command=lambda: encode_data(),
                          font=("Script MT Bold", 14))
button_encode.pack()

# Label for displaying encoded data
label_encoded = tk.Label(root, text="Encoded Data:", bg="turquoise",
                         font=("Script MT Bold", 14))
label_encoded.pack()

# Text area for displaying encoded data
text_encoded = scrolledtext.ScrolledText(root, height=5, width=50,
                                         font=("Script MT Bold", 12))
text_encoded.pack()

# Label for displaying codebook
label_codebook = tk.Label(root, text="Codebook:", bg="turquoise",
                          font=("Script MT Bold", 14))
label_codebook.pack()

# Text area for displaying codebook
text_codebook = scrolledtext.ScrolledText(root, height=5, width=50,
                                          font=("Script MT Bold", 12))
text_codebook.pack()

# Function to decode data
def decode_data():
    encoded_data = text_encoded.get("1.0", tk.END).strip()
    codebook_str = text_codebook.get("1.0", tk.END).strip()
    if not encoded_data or not codebook_str:
        return
    try:
        codebook = eval(codebook_str)
    except:
        text_decoded.delete("1.0", tk.END)
        text_decoded.insert(tk.END, "Invalid codebook format")
        return
    decoded_data = huffman_decoding(encoded_data, codebook)
    text_decoded.delete("1.0", tk.END)
    text_decoded.insert(tk.END, decoded_data)

# Button to trigger decoding
button_decode = tk.Button(root, text="Decode", command=decode_data,
                          font=("Script MT Bold", 14))
button_decode.pack()

# Label for displaying decoded data
label_decoded = tk.Label(root, text="Decoded Data:", bg="turquoise",
                         font=("Script MT Bold", 14))
label_decoded.pack()

# Text area for displaying decoded data
text_decoded = scrolledtext.ScrolledText(root, height=5, width=50,
                                         font=("Script MT Bold", 12))
text_decoded.pack()

# Function to show Huffman tree in a new window
def show_huffman_tree():
    root_node = encode_data()  # Ensure root is retrieved
    if root_node:
        # Create a new Toplevel window
        new_window = tk.Toplevel(root)
        new_window.title("Huffman Tree")
        
        # Create a matplotlib figure
        fig = _huffman_tree(root_node)
        
        # Add the figure to the Toplevel window
        canvas = FigureCanvasTkAgg(fig, master=new_window)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

# Button to show Huffman tree
button_tree = tk.Button(root, text="Show Huffman Tree", command=show_huffman_tree,
                        font=("Script MT Bold", 14))
button_tree.pack()

# Run the main event loop
root.mainloop()





#Link for google collab : https://colab.research.google.com/drive/1jnfgUxXnZXQMqFuKYReeq7viSlmOlGOd?usp=sharing
